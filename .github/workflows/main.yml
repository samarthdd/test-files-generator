# This is a basic workflow to help you get started with Actions

name: Auto tagging and release

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '.github/workflows/main.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      create_new_tag:
        description: create_new_tag?
        required: true
        default: 'false'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          submodules: recursive
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Form tag name
        id: tagging
        run: |

          git config user.name github-actions@github.com
          git config user.email github-actions
          git config --global http.postBuffer 1048576000

          git fetch --tags
          
          tags=$(git tag -l)
          
          if [ -z "$tags" ]; then
            latest_tag="v0.0.0"
          else
            repo_name=$(git config --get remote.origin.url | sed 's/.*\/\([^ ]*\/[^.]*\).*/\1/')
            latest_tag=$(curl -sL https://api.github.com/repos/$repo_name/releases/latest | jq -r ".tag_name")
          fi
          
          echo "previous latest tag : $latest_tag"
          version=`echo $latest_tag| cut -d. -f1`
          major=`echo $latest_tag | cut -d. -f2`
          minor=`echo $latest_tag | cut -d. -f3`

          branch=${{ steps.extract_branch.outputs.branch }}
          prerelease=false

          if [[ $branch == 'main' &&  "${{ github.event.inputs.create_new_tag }}" == "true" ]] ; then
            version=${version#"v"}
            version=`expr $version + 1`
            major=0
            minor=0
            version=v${version}
            echo $version

          elif [ $branch == 'main' ]; then
            minor=0
            major=`expr $major + 1`
            
          elif [ $branch == 'develop' ]; then
              prerelease=true
              echo $branch
              if [ -z "$minor" ]; then
                 minor=0
              else
                  minor=`expr $minor + 1`
              fi
          fi

          tag_name=$version.$major.$minor
          echo "new tag is : $tag_name"

          echo ::set-output name=prerelease::$prerelease
          echo ::set-output name=tag_id::$tag_name

      - name: Release snapshot
        id: release-snapshot
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tagging.outputs.tag_id }}
          release_name: ${{ steps.tagging.outputs.tag_id }}
          draft: false
          prerelease: ${{ steps.tagging.outputs.prerelease }}
